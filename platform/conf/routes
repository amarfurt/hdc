# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /welcome                    controllers.Application.welcome()
POST    /welcome                    controllers.Application.authenticate()
POST    /registration               controllers.Application.register()
GET     /logout                     controllers.Application.logout()
# News
GET     /                           controllers.News.index()
POST    /news                       controllers.News.add()
POST    /news/get                   controllers.News.get()
PUT     /news/:id                   controllers.News.hide(id: String)
DELETE  /news/:id                   controllers.News.delete(id: String)
# Messages
GET     /messages                   controllers.Messages.index()
POST    /messages/get               controllers.Messages.get()
GET     /messages/create            controllers.Messages.create()
POST    /messages/send              controllers.Messages.send()
GET     /messages/:id               controllers.Messages.details(id: String)
DELETE  /messages/:id               controllers.Messages.delete(id: String)
DELETE  /messages/:id/trash         controllers.Messages.remove(id: String)
PUT     /messages/:id/:from/:to     controllers.Messages.move(id: String, from: String, to: String)
# Records
GET     /records                    controllers.Records.index()
POST    /records/get                controllers.Records.get()
GET     /records/visible            controllers.Records.getVisibleRecords()
GET     /records/:id                controllers.Records.details(id: String)
GET     /records/create/:appId      controllers.Records.create(appId: String)
GET     /records/import/:appId      controllers.Records.importRecords(appId: String)
GET     /records/redirect/:appId    controllers.Records.onAuthorized(appId: String)
GET     /records/search/:query      controllers.Records.search(query: String)
POST    /records/show/spaces        controllers.Records.showInSpaces()
POST    /records/share/circles      controllers.Records.shareWithCircles()
POST    /records/:id/spaces         controllers.Records.updateSpaces(id: String)
POST    /records/:id/circles        controllers.Records.updateSharing(id: String)
GET     /records/:id/file           controllers.Records.getFile(id: String)
GET     /records/filters/*filters   controllers.Records.filter(filters)
# Spaces
GET     /spaces                     controllers.Spaces.index()
POST    /spaces                     controllers.Spaces.add()
POST    /spaces/get                 controllers.Spaces.get()
GET     /spaces/:id                 controllers.Spaces.details(id: String)
DELETE  /spaces/:id                 controllers.Spaces.delete(id: String)
POST    /spaces/:id/records         controllers.Spaces.addRecords(id: String)
GET     /spaces/:id/token           controllers.Spaces.getToken(id: String)
# Circles
GET     /circles                    controllers.Circles.index()
POST    /circles                    controllers.Circles.add()
POST    /circles/get                controllers.Circles.get()
GET     /circles/:id                controllers.Circles.details(id: String)
DELETE  /circles/:id                controllers.Circles.delete(id: String)
POST    /circles/:id/users          controllers.Circles.addUsers(id: String)
DELETE  /circles/:id/users/:userId  controllers.Circles.removeMember(id: String, userId: String)
# Market
GET     /market                     controllers.Market.index()
GET     /market/apps                controllers.Market.registerAppForm()
POST    /market/apps/:type          controllers.Market.registerApp(type: String)
GET     /market/visualizations      controllers.Market.registerVisualizationForm()
POST    /market/visualizations      controllers.Market.registerVisualization()
# Search
GET     /search/:query              controllers.GlobalSearch.index(query: String)
GET     /search/run/:query          controllers.GlobalSearch.search(query: String)
GET     /search/complete/:query     controllers.GlobalSearch.complete(query: String)
# Users
POST    /users/get                  controllers.Users.get()
GET     /users/current              controllers.Users.getCurrentUser()
GET     /users/contacts             controllers.Users.loadContacts()
DELETE  /users/pushed               controllers.Users.clearPushed()
DELETE  /users/shared               controllers.Users.clearShared()
GET     /users/:id                  controllers.Users.details(id: String)
GET     /users/search/:query        controllers.Users.search(query: String)
GET     /users/complete/:query      controllers.Users.complete(query: String)
# Apps
POST    /apps/get                   controllers.Apps.get()
GET     /apps/:id                   controllers.Apps.details(id: String)
PUT     /apps/:id                   controllers.Apps.install(id: String)
DELETE  /apps/:id                   controllers.Apps.uninstall(id: String)
GET     /apps/:id/installed         controllers.Apps.isInstalled(id: String)
GET     /apps/:id/url               controllers.Apps.getUrl(id: String)
POST    /apps/:id/access/oauth2     controllers.Apps.requestAccessTokenOAuth2(id: String)
GET     /apps/:id/request/oauth1    controllers.Apps.getRequestTokenOAuth1(id: String)
POST    /apps/:id/access/oauth1     controllers.Apps.requestAccessTokenOAuth1(id: String)
# Visualizations
POST    /visualizations/get         controllers.Visualizations.get()
GET     /visualizations/:id         controllers.Visualizations.details(id: String)
PUT     /visualizations/:id         controllers.Visualizations.install(id: String)
DELETE  /visualizations/:id         controllers.Visualizations.uninstall(id: String)
GET     /visualizations/:id/installed controllers.Visualizations.isInstalled(id: String)
GET     /visualizations/:id/url     controllers.Visualizations.getUrl(id: String)

# JS Routes
GET     /assets/javascripts/routes  controllers.Application.javascriptRoutes()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Genome data converter (special controller for the 23andMe Converter app)
OPTIONS /apps/gdconverter/files     controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/files     controllers.apps.GenomeDataConverter.getFiles()
OPTIONS /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.convert()

# Developers Page
GET     /developers                 controllers.Developers.index()
# Apps Public API
OPTIONS /api/apps/create            controllers.AppsAPI.checkPreflight()
POST    /api/apps/create            controllers.AppsAPI.createRecord()
OPTIONS /api/apps/upload            controllers.AppsAPI.checkPreflight()
POST    /api/apps/upload            controllers.AppsAPI.uploadFile()
OPTIONS /api/apps/oauth2            controllers.AppsAPI.checkPreflight()
POST    /api/apps/oauth2            controllers.AppsAPI.oAuth2Call()
OPTIONS /api/apps/oauth1            controllers.AppsAPI.checkPreflight()
POST    /api/apps/oauth1            controllers.AppsAPI.oAuth1Call()
# Visualizations Public API
OPTIONS /api/visualizations/ids     controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/ids     controllers.VisualizationsAPI.getIds()
OPTIONS /api/visualizations/records controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/records controllers.VisualizationsAPI.getRecords()
